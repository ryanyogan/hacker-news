// FIXME: Fix the linter config, remove the ignores in here
const fs = require('fs');
const path = require('path');
const express = require('express');
const favicon = require('serve-favicon');
const compression = require('compression');
const serialize = require('serialize-javascript');
const vueServerRenderer = require('vue-server-renderer');
const lru = require('lru-cache');
const EXPRESS_VERSION = require('express/package.json').version;
const VUE_SERVER_VERSION = require('vue-server-renderer/package.json').version;

const resolve = file => path.resolve(__dirname, file);

const isProd = process.env.NODE_ENV === 'production';
const serverInfo =
  `express/${EXPRESS_VERSION} vue-server-renderer/${VUE_SERVER_VERSION}`;

const app = express();

const createRenderer = bundle => (
  vueServerRenderer.createBundleRenderer(bundle, {
    cache: lru({
      max: 1000,
      maxAge: 1000 * 60 * 15,
    }),
  })
);

const parseIndex = (template) => {
  const contentMarker = '<!-- APP -->';
  const injectionNode = template.indexOf(contentMarker);

  return {
    head: template.slice(0, injectionNode),
    tail: template.slice(injectionNode + contentMarker.length),
  };
};

let indexHTML; // Generated by html-webpack-plugin
let renderer; // created from the webpack-genered server bundle
if (isProd) {
  renderer = createRenderer(fs.readFileSync(
    resolve('./dist/server-bundle.js'), 'utf-8'),
  );
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'));
} else {
  require('./build/setup-dev-server')(app, { // eslint-disable-line
    bundleUpdated: (bundle) => {
      renderer = createRenderer(bundle);
    },
    indexUpdated: (index) => {
      indexHTML = parseIndex(index);
    },
  });
}

const serve = (staticPath, cache) => express.static(resolve(staticPath), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0,
});

app.use(compression({ threshold: 0 }));
app.use(favicon('./public/logo-48.png'));
app.use('/service-worker.js', serve('./dist/service-worker.js'));
app.use('/manifest.json', serve('./manifest.json'));
app.use('/dist', serve('./dist'));
app.use('/public', serve('./public'));

app.get('*', (req, res) => { // eslint-disable-line
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.');
  }

  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Server', serverInfo);

  const seconds = Date.now();
  const context = { url: req.url };
  const renderStream = renderer.renderToStream(context);

  renderStream.once('data', () => {
    res.write(indexHTML.head);
  });

  renderStream.on('data', (chunk) => {
    res.write(chunk);
  });

  renderStream.on('end', () => {
    // embed initial store state
    if (context.initialState) {
      res.write(
        `<script>window.__INITIAL_STATE__=${
          serialize(context.initialState, { isJSON: true })
        }</script>`,
      );
    }
    res.end(indexHTML.tail);
    console.log(`Rendered in: ${Date.now() - seconds}ms`); // eslint-disable-line
  });

  renderStream.on('error', (err) => { // eslint-disable-line
    if (err && err.code === '404') {
      res.status(404).end('404 | Page Not Found');
      return err;
    }

    // Render error page or redirect
    res.status(500).end('500 | Internal Server Error');
    console.error(`Error during render: ${req.url}`); // eslint-disable-line
    console.error(err); // eslint-disable-line
  });
});

const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log(`Server started at localhost:${port}`); // eslint-disable-line
});
